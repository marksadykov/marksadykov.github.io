{"version":3,"sources":["components/Home/Home.module.scss","components/Chart/Chart.module.scss","utils/meta.ts","components/Home/icons/exchange.svg","components/Search/Search.tsx","components/Change/utils/calculateValue.tsx","config/apiUrls.ts","store/currencyStore/requestCurrencyStore.ts","store/models/currency.ts","store/currencyStore/CurrencyStore.ts","utils/useAsync.ts","utils/useLocal.ts","components/Change/Change.tsx","utils/useWindowSize.tsx","components/Chart/utils/makeInterval.tsx","store/worldStore/requestWorldStore.ts","store/models/world.ts","store/worldStore/WorldStore.ts","components/Chart/Chart.tsx","components/SingleCurrency/singleCurrency.tsx","store/singleCurrencyStore/requestCurrencyStore.ts","store/models/singleCurrency.ts","store/singleCurrencyStore/singleCurrencyStore.ts","components/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Meta","getMoney","search","money","searchValue","toLowerCase","filter","name","indexOf","ChoseSearch","props","React","setSearch","value","onChange","e","target","after","listCurrency","length","map","item","onClick","currentCountry","country","setActiveModal","homeValue","currentValue","id","SearchGroup","activePanel","setActivePanel","platform","sizeX","goHeaderSearch","calculateValue","firstValue","firstCountry","secondCountry","secondValue","isNaN","isFinite","String","config","exchangeApi","apiUrls","symbols","join","currencyApi","start","end","worldApi","requestCurrencyStore","a","axios","response","isError","data","raw","index","currency","rate","CurrencyStore","_exchange","meta","initial","_metaChangedReaction","reaction","args","console","log","makeObservable","this","fetch","action","observable","exchange","computed","loading","success","error","runInAction","slice","useAsync","func","inputs","catch","useLocalStore","creator","store","container","current","useLocal","destroy","observer","activeModal","setCurrentCountry","currentCountry2","setCurrentCountry2","firstMoney","setFirstMoney","secondMoney","setSecondMoney","modal","onClose","header","left","label","right","IS_PLATFORM_IOS","settlingHeight","Search","setActiveView","mode","top","placeholder","Number","type","disabled","useWindowSize","width","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","makeInterval","Date","currentDate","days","date","valueOf","setDate","getDate","changeHours","toISOString","requestWorldStore","url","headers","timestamp","currentDateProp","year","getFullYear","month","getMonth","day","Доллары","volume","WorldStore","_world","_startTime","_endTime","bound","world","screenWidth","className","styles","chartStyle","level","weight","style","marginBottom","marginTop","marginLeft","marginRight","LineChart","XAxis","dataKey","tick","fill","fontSize","Tooltip","wrapperStyle","CartesianGrid","stroke","Line","yAxisId","margin","padding","before","size","src","subheader","requestSingleCurrencyStore","symbol","logoUrl","logo_url","price","singleCurrencyStore","_currency","_symbols","Home","activeView","description","iconExchange","svgicon","Chart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","bridge","send","subscribe","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,wB,oBCA5BD,EAAOC,QAAU,CAAC,WAAa,4B,kECDnBC,E,2FCAG,MAA0B,qC,eCSnCC,EAAW,SAACC,EAAgBC,GAC9B,IAAMC,EAAcF,EAAOG,cAC3B,OAAOF,EAAMG,QAAO,qBAAEC,KAAeF,cAAcG,QAAQJ,IAAgB,MAGzEK,EAAc,SAACC,GAMb,IAAD,EAEyBC,WAAe,IAFxC,mBAEIT,EAFJ,KAEYU,EAFZ,KAIH,OACI,mCACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAQC,MAAOX,EAAQY,SAAU,SAACC,GAAYH,EAAUG,EAAEC,OAAOH,QAEjEI,MAAO,OACNhB,EAASC,EAAQQ,EAAMQ,cAAcC,OAAS,GAAKlB,EAASC,EAAQQ,EAAMQ,cAAcE,KAAI,SAACC,GAAD,OACzF,cAAC,IAAD,CAAMC,QAAU,WACRZ,EAAMa,eAAe,CACjBC,QAASH,EAAKd,KACdM,MAAOQ,EAAKR,QAEhBH,EAAMe,eAAe,CACjBC,UAAW,KACXC,aAAc,MAP1B,SAWeN,EAAKd,MAAfc,EAAKO,OAEmC,IAAhD3B,EAASC,EAAQQ,EAAMQ,cAAcC,QAAgB,cAAC,IAAD,iHAiCvDU,EA1BK,SAACnB,GAMd,IAAD,EAEoCC,WAAe,UAFnD,mBAEKmB,EAFL,KAEkBC,EAFlB,KAIMC,EAAatB,EAAbsB,SACR,OACI,cAAC,IAAD,CACIF,YAAaA,EADjB,SAGI,cAAC,IAAD,CAAOF,GAAG,SAAV,SACI,cAAC,EAAD,CAAaL,eAAgBb,EAAMa,eACrBE,eAAgBf,EAAMe,eACtBQ,MAAOvB,EAAMuB,MAAOC,eAAgB,kBAAMH,EAAe,kBACzDb,aAAcR,EAAMQ,aACpBc,SAAUA,S,SC1DzBG,EAXQ,SAACC,EAAoBC,EAAiDC,GAEzF,IAAMC,EAAcH,GAAeC,EAAaxB,MAAQyB,EAAczB,OAEtE,OAAI2B,MAAMD,KAAiBE,SAASF,GACzB,IAGJG,OAAOH,I,2DHVNvC,K,kBAAAA,E,kBAAAA,E,cAAAA,E,mBAAAA,M,0BIAN2C,EAGM,mCAHNA,EAIO,6BAUPC,EAAc,UAAGD,EAAH,kCACOA,GAQdE,EACC,SAACC,GAAD,OAjBM,SAACA,GAAD,MAChB,UAAGH,EAAH,oCACOA,EADP,mBAEOG,EAAQC,OAFf,+BAiBIC,CAAYF,IAFPD,EAIC,kBAAcD,GAJfC,EAMF,SAACI,EAAeC,GAAhB,OAZM,SAACD,EAAeC,GAAhB,MACb,UAAGP,EAAH,iCACQA,EADR,qBAESM,GAFT,eAGQC,GAQuCC,CAASF,EAAOC,ICxBtDE,EAAoB,uCAAG,4BAAAC,EAAA,+EAKLC,IAEnBT,KAPwB,cAKtBU,EALsB,yBASrB,CACHC,SAAS,EAETC,MC2B2BC,ED3BEH,EAASE,KC6BvCC,EAAItC,KAAI,SAACC,EAAMsC,GAClB,MAAO,CACH/B,GAAI+B,EACJpD,KAAMc,EAAKuC,SACX/C,OAAQQ,EAAKwC,YD7CW,yDAerB,CACHL,SAAS,EACTC,KAAM,KAjBkB,kCCuCE,IAACC,IDvCH,oBAAH,qDECZI,E,WAMjB,aAAe,IAAD,gCAJdC,UAA6B,GAIf,KAFdC,KAAahE,EAAKiE,QAEJ,KA6CdC,qBAA0CC,aACtC,kBAAM,EAAKH,QACX,WAAc,IAAD,uBAATI,EAAS,yBAATA,EAAS,gBACTC,QAAQC,IAAI,WAAYF,MA/C5BG,YAAeC,KAAM,CAEjBC,MAAOC,IAGPX,UAAWY,IACXC,SAAUC,M,gFAIlB,uCAAAxB,EAAA,yDACQmB,KAAKR,OAAShE,EAAK8E,SAAWN,KAAKR,OAAShE,EAAK+E,QADzD,wDAKIP,KAAKR,KAAOhE,EAAK8E,QACjBN,KAAKT,UAAY,GANrB,SASoCX,IATpC,mBASYI,EATZ,EASYA,QAASC,EATrB,EASqBA,MACbD,EAVR,wBAWQgB,KAAKR,KAAOhE,EAAKgF,MAXzB,2BAeIC,aAAY,WACR,EAAKjB,KAAOhE,EAAK+E,QAEjB,EAAKhB,UAAYN,EAAKyB,WAlB9B,iD,0EA0BA,WACI,OAAOV,KAAKT,Y,qBAGhB,WACIS,KAAKN,2B,KCpDAiB,EAAW,SAACC,EAA0BC,GAC/C1E,aAAgB,WACZyE,IAAOE,MAAMjB,QAAQC,OACtB,CAACe,EAAQD,KCWHG,EAAgB,SAAwBC,GACjD,IAAMC,EAfc,SAAID,GACxB,IAAME,EAAY/E,SAAuB,MAMzC,OAJ0B,OAAtB+E,EAAUC,UACVD,EAAUC,QAAUH,KAGjBE,EAAUC,QAQHC,CAASJ,GAMvB,OAJA7E,aAAgB,WACZ,OAAO,kBAAM8E,EAAMI,aACpB,CAACJ,IAEGA,GCwKIK,eA1KA,SAACpF,GAEZ,IAAM+E,EAAQF,GAAc,kBAAM,IAAIzB,KAEtCqB,GAAS,kBAAMM,EAAMhB,UAAS,IAJc,MAMN9D,WAAe,CACjDe,UAAW,KACXC,aAAc,KAR0B,mBAMrCoE,EANqC,KAMxBtE,EANwB,OAWAd,WAAe,CACvDa,QAAS,GACTX,MAAO,IAbiC,mBAWrCU,EAXqC,KAWrByE,EAXqB,OAgBErF,WAAe,CACzDa,QAAS,GACTX,MAAO,IAlBiC,mBAgBrCoF,EAhBqC,KAgBpBC,EAhBoB,OAqBRvF,WAAe,GArBP,mBAqBrCwF,EArBqC,KAqBzBC,EArByB,OAsBNzF,WAAe,IAtBT,mBAsBrC0F,EAtBqC,KAsBxBC,EAtBwB,KAwB5C3F,aACI,WACI2F,EAAe5D,OAAOP,EAAegE,EAAY5E,EAAgB0E,OAErE,CAACE,EAAY5E,EAAgB0E,IAGjC,IAAMM,EACF,eAAC,IAAD,CACIR,YAA2C,KAA7BA,EAAYpE,aAAuBoE,EAAYrE,UAAYqE,EAAYpE,aADzF,UAGI,cAAC,IAAD,CACIC,GAAI,YACJ4E,QAAS,WACL/E,EAAe,CACXC,UAAW,KACXC,aAAc,MAGtB8E,OACI,cAAC,IAAD,CACIC,KACI,cAAC,IAAD,CAAiBC,MAAM,iCACnBrF,QAAS,WACLG,EAAe,CACXC,UAAW,KACXC,aAAc,QAK9BiF,MACIC,KACI,cAAC,IAAD,CACIvF,QAAS,WACLG,EAAe,CACXC,UAAW,KACXC,aAAc,MAJ1B,SAQA,cAAC,IAAD,MArBZ,mGA4BJmF,eAAgB,GArCpB,SAuCI,cAAC,IAAD,UACI,cAACC,EAAD,CACIxF,eAAgByE,EAChBvE,eAAgBA,EAChBP,aAAcuE,EAAMb,eAKhC,cAAC,IAAD,CACIhD,GAAI,aACJ4E,QAAS,WACL/E,EAAe,CACXC,UAAW,KACXC,aAAc,MAGtB8E,OACI,cAAC,IAAD,CACIC,KACI,cAAC,IAAD,CAAiBC,MAAM,iCACNrF,QAAS,WACLG,EAAe,CACXC,UAAW,KACXC,aAAc,QAK3CiF,MACIC,KACA,cAAC,IAAD,CACIvF,QAAS,WACLG,EAAe,CACXC,UAAW,KACXC,aAAc,MAJ1B,SAQI,cAAC,IAAD,MArBZ,mGA4BJmF,eAAgB,GArCpB,SAuCI,cAAC,IAAD,UACI,cAACC,EAAD,CACIxF,eAAgB2E,EAChBzE,eAAgBA,EAChBP,aAAcuE,EAAMb,kBAOxC,OAEI,cAAC,IAAD,CAAM9C,YAAY,SAASyE,MAAOA,EAAlC,SACI,cAAC,IAAD,CAAO3E,GAAG,SAAV,SACI,eAAC,IAAD,CAAO6E,OAAQ,cAAC,IAAD,CAAQnF,QAAS,kBAAMZ,EAAMsG,cAAc,SAASC,KAAK,YAAzD,4CAAf,UACI,cAAC,IAAD,CAAUC,IAAI,0FAAd,SACI,cAAC,IAAD,CACIC,YAAY,0DACZ7F,QAAS,kBAAMG,EAAe,CAC1BC,UAAW,KACXC,aAAc,eAJtB,SAMEJ,EAAeC,YAGrB,cAAC,IAAD,CAAU0F,IAAI,sGAAd,SACI,cAAC,IAAD,CAAOrG,MAAO6B,OAAOyD,GAAarF,SAAU,SAAAC,GAAC,OAAIqF,EAAcgB,OAAOrG,EAAEC,OAAOH,SAASwG,KAAK,aAEjG,cAAC,IAAD,CAAUH,IAAI,0FAAd,SACI,cAAC,IAAD,CACIC,YAAY,0DACZ7F,QAAS,kBAAMG,EAAe,CAC1BC,UAAW,KACXC,aAAc,gBAJtB,SAMEsE,EAAgBzE,YAGtB,cAAC,IAAD,CAAU0F,IAAI,sGAAd,SACI,cAAC,IAAD,CAAOrG,MAAOwF,EAAagB,KAAK,SAASC,UAAQ,gB,6CChK1DC,EArBO,WAAO,IAAD,EACY5G,WAAe,CAC/C6G,MAAO,EACPC,OAAQ,IAHY,mBACjBC,EADiB,KACLC,EADK,KAkBxB,OAZAhH,aAAgB,WACZ,IAAMiH,EAAe,WACjBD,EAAc,CACVH,MAAOK,OAAOC,WACdL,OAAQI,OAAOE,eAKvB,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IAEIF,G,kBCJIQ,EANM,WACjB,IAAMhF,EAAM,IAAIiF,KAEhB,MAAO,CATS,SAACC,EAAmBC,GACpC,IAAMC,EAAO,IAAIH,KAAKC,EAAYG,WAElC,OADAD,EAAKE,QAAQF,EAAKG,UAAYJ,GACvBC,EAKOI,CAAYxF,EAVL,GAWPyF,cAAezF,EAAIyF,gBCTxBC,EAAiB,uCAAG,WAAO3F,EAAeC,GAAtB,eAAAG,EAAA,+EAEFC,IACf,CACIuF,IAAKhG,EAAcI,EAAOC,GAC1B4F,QAAS,CACL,8BAA+B,OANtB,cAEnBvF,EAFmB,yBAUlB,CACHC,SAAS,EACTC,MCNwBC,EDMEH,EAASE,KCJpCC,EAAItC,KAAI,SAACC,GAEZ,IAAM+G,EAAc,IAAID,KAAK9G,EAAK0H,WAC5BC,EAAkB,CACpBC,KAAMb,EAAYc,cAClBC,MAAOf,EAAYgB,WAAa,EAChCC,IAAKjB,EAAYK,WAMrB,MAAO,CACHH,KALS,UAAGU,EAAgBK,IAAnB,eACNL,EAAgBG,MADV,eAENH,EAAgBC,MAInBK,8CAAUjI,EAAKkI,cDtBM,yDAelB,CACH/F,SAAS,EACTC,KAAM,KAjBe,kCCME,IAACC,IDNH,oBAAH,wDEET8F,E,WAQjB,WAAYvG,EAAeC,GAAc,IAAD,gCAPxCuG,OAAuB,GAOiB,KALxCzF,KAAahE,EAAKiE,QAKsB,KAHxCyF,WAAa,GAG2B,KAFxCC,SAAW,GAE6B,KAwCxCzF,qBAA0CC,aACtC,kBAAM,EAAKH,QACX,WAAc,IAAD,uBAATI,EAAS,yBAATA,EAAS,gBACTC,QAAQC,IAAI,WAAYF,MA1C5BG,YAAeC,KAAM,CACjBiF,OAAQ9E,IACR+E,WAAY/E,IACZgF,SAAUhF,IACVF,MAAOC,IAAOkF,MACdC,MAAOhF,MAEXL,KAAKkF,WAAazG,EAClBuB,KAAKmF,SAAWzG,E,gFAGpB,uCAAAG,EAAA,yDACQmB,KAAKR,OAAShE,EAAK8E,SAAWN,KAAKR,OAAShE,EAAK+E,QADzD,wDAKIP,KAAKR,KAAOhE,EAAK8E,QACjBN,KAAKiF,OAAS,GANlB,SAQoCb,EAAkBpE,KAAKkF,WAAYlF,KAAKmF,UAR5E,mBAQYnG,EARZ,EAQYA,QAASC,EARrB,EAQqBA,MACbD,EATR,wBAUQgB,KAAKR,KAAOhE,EAAKgF,MAVzB,2BAcIC,aAAY,WACR,EAAKjB,KAAOhE,EAAK+E,QACjB,EAAK0E,OAAShG,EAAKyB,WAhB3B,iD,uEAoBA,WACI,OAAOV,KAAKiF,S,qBAGhB,WACIjF,KAAKN,2B,KCCE4B,eAnCG,WAEd,IAAMgE,EAAcvC,IAFA,EAGCW,IAHD,mBAGbjF,EAHa,KAGNC,EAHM,KAIduC,EAAQF,GAAc,kBAAM,IAAIiE,EAAWvG,EAAOC,MAIxD,OAFAiC,EAASM,EAAMhB,MAAO,IAGlB,sBACIsF,UAAWC,IAAOC,WADtB,UAGI,cAAC,IAAD,CAAOC,MAAM,IAAIC,OAAO,OAAOC,MAAO,CAClCC,aAAc,EACdC,UAAW,EACXC,WAAY,KACZC,YAAa,MAJjB,mLAQA,eAACC,EAAA,EAAD,CACIjD,MAAOsC,EAAYtC,MAAM,GACzBC,OAAQ,IACRhE,KAAMgC,EAAMoE,MAHhB,UAKI,cAACa,EAAA,EAAD,CAAOC,QAAQ,OAAOC,KAAM,CAAEC,KAAM,UAAWC,SAAU,MACzD,cAACC,EAAA,EAAD,CAASC,aAAc,CAAEF,SAAU,MACnC,cAACG,EAAA,EAAD,CAAeC,OAAO,YACtB,cAACC,EAAA,EAAD,CAAM9D,KAAK,WAAWsD,QAAQ,6CAAUO,OAAO,UAAUE,QAAS,aCbnEtF,eAzBQ,WAMnB,OAEI,cAAC,IAAD,CACIsE,MAAO,CACHiB,OAAQ,EACRC,QAAS,GAEbC,OACI,cAAC,IAAD,CAAQC,KAAM,GACNvE,KAAK,QACLwE,IAAI,mFAGhBhF,OAAO,MACPiF,UAAU,eCvBTC,EAA0B,uCAAG,WAAO7I,GAAP,eAAAO,EAAA,+EAEXC,IACnBT,EAAiBC,IAHa,cAE5BS,EAF4B,yBAK3B,CACHC,SAAS,EACTC,MCGiCC,EDHEH,EAASE,KCK7CC,EAAItC,KAAI,SAACC,EAAMsC,GAClB,MAAO,CACHiI,OAAQvK,EAAKuK,OACbrL,KAAMc,EAAKd,KACXsL,QAASxK,EAAKyK,SACdC,OAAS1K,EAAK0K,MAAM7G,MAAM,EAAG7D,EAAK0K,MAAM5K,OAAS,UDjBnB,yDAU3B,CACHqC,SAAS,EACTC,KAAM,KAZwB,kCCUE,IAACC,IDVH,oBAAH,sDEElBsI,G,WAMjB,WAAYlJ,GAAoB,IAAD,gCAL/BmJ,UAAmC,GAKJ,KAJ/BC,SAAqB,GAIU,KAF/BlI,KAAahE,EAAKiE,QAEa,KAqC/BC,qBAA0CC,aACtC,kBAAM,EAAKH,QACX,WAAc,IAAD,uBAATI,EAAS,yBAATA,EAAS,gBACTC,QAAQC,IAAI,WAAYF,MAvC5BG,YAAeC,KAAM,CACjByH,UAAWtH,IACXF,MAAOC,IAAOkF,MACdhG,SAAUiB,MAEdL,KAAK0H,SAAWpJ,E,gFAGpB,uCAAAO,EAAA,yDACQmB,KAAKR,OAAShE,EAAK8E,SAAWN,KAAKR,OAAShE,EAAK+E,QADzD,wDAKIP,KAAKR,KAAOhE,EAAK8E,QACjBN,KAAKyH,UAAY,GANrB,SAQoCN,EAA2BnH,KAAK0H,UARpE,mBAQY1I,EARZ,EAQYA,QAASC,EARrB,EAQqBA,MACbD,EATR,wBAUQgB,KAAKR,KAAOhE,EAAKgF,MAVzB,2BAcIC,aAAY,WACR,EAAKjB,KAAOhE,EAAK+E,QACjB,EAAKkH,UAAYxI,EAAKyB,WAhB9B,iD,0EAoBA,WACI,OAAOV,KAAKyH,Y,qBAGhB,WACIzH,KAAKN,2B,KCmDEiI,GA1EF,WAAO,IAAD,EAEqBxL,WAAe,QAFpC,mBAERyL,EAFQ,KAEIpF,EAFJ,KAITvB,EAAQF,GAAc,kBAAM,IAAIyG,GAAoB,CAAC,MAAM,MAAO,MAAO,WAI/E,OAFA7G,EAASM,EAAMhB,MAAO,IAGd,eAAC,IAAD,CAAM2H,WAAYA,EAAlB,UACI,cAAC,IAAD,CAAMtK,YAAY,OAAOF,GAAG,OAA5B,SACI,eAAC,IAAD,CAAOA,GAAG,OAAV,UACI,cAAC,IAAD,yBACA,cAAC,IAAD,CAAOyK,YAAY,iCAAnB,SACI,eAAC,IAAD,CAAYb,KAAK,IAAjB,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAYpB,MAAO,CAAE3C,OAAQ,KAAOnG,QAAU,kBAAM0F,EAAc,WAAlE,SACI,cAAC,IAAD,CACIyE,IAAKa,EACLvC,UAAWC,IAAOuC,cAI9B,cAAC,IAAD,IAGA,cAAC,IAAD,IAEA,cAAC,IAAD,IAEA,cAAC,IAAD,IAEA,cAAC,IAAD,SAIR,eAAC,IAAD,CAAYf,KAAK,IAAjB,UACI,cAAC,IAAD,UACI,cAAC,EAAD,MAEJ,cAAC,IAAD,IAEA,cAAC,IAAD,IAEA,cAAC,IAAD,OAGJ,eAAC,IAAD,CAAYA,KAAK,IAAjB,UACI,cAAC,IAAD,UACI,sCAEJ,cAAC,IAAD,IAEA,cAAC,IAAD,OAGJ,cAAC,IAAD,CAAOa,YAAY,0DAAnB,SACI,cAAC,IAAD,CAAUb,KAAM,IAAhB,SACI,cAAC,IAAD,CAAMvE,KAAK,SAAX,SACI,cAACuF,EAAD,eAMpB,cAAC,IAAD,CAAM1K,YAAY,OAAOF,GAAG,SAA5B,SACI,eAAC,IAAD,CAAOA,GAAG,OAAV,UACI,cAAC,IAAD,qEACA,cAAC,EAAD,CAAQoF,cAAeA,aChFhCyF,OAPf,WAEI,OACI,cAAC,GAAD,KCOOC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,oBCAdQ,KAAOC,KAAK,gBAGZD,KAAOE,WAAU,SAAAtM,GAAC,OAAIsD,QAAQC,IAAIvD,MAElCuM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BhB,O","file":"static/js/main.5968c2ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgicon\":\"Home_svgicon__1D-S7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartStyle\":\"Chart_chartStyle__1LxCx\"};","export enum Meta {\n    initial = 'initial',\n    loading = 'loading',\n    error = 'error',\n    success = 'success',\n}\n","export default __webpack_public_path__ + \"static/media/exchange.7b8ab5dc.svg\";","import * as React from 'react';\nimport {\n    Cell,\n    Footer,\n    Group, Panel,\n    Search, SizeType,\n    View\n} from \"@vkontakte/vkui\";\n\nconst getMoney = (search: string, money: {id: number, name: string, value:number}[]) => {\n    const searchValue = search.toLowerCase();\n    return money.filter(({name}) => name.toLowerCase().indexOf(searchValue) > -1);\n}\n\nconst ChoseSearch = (props: { goHeaderSearch: ((event: React.MouseEvent<HTMLElement, MouseEvent>) => void) | undefined;\n    sizeX: SizeType;\n    platform: any;\n    currentCountry: any;\n    setActiveModal: any;\n    listCurrency: any;\n}) =>  {\n\n    const [search, setSearch] = React.useState('');\n\n    return (\n        <>\n            <Group>\n                <Search value={search} onChange={(e: any) => {setSearch(e.target.value)}\n                }\n                after={null}/>\n                {getMoney(search, props.listCurrency).length > 0 && getMoney(search, props.listCurrency).map((item: any) =>\n                    <Cell onClick={ () => {\n                            props.currentCountry({\n                                country: item.name,\n                                value: item.value\n                            });\n                            props.setActiveModal({\n                                homeValue: null,\n                                currentValue: ''\n                            })\n                        }\n                    }\n                    key={item.id}>{item.name}</Cell>\n                )}\n                {getMoney(search, props.listCurrency).length === 0 && <Footer>Ничего не найдено</Footer>}\n            </Group>\n        </>\n    );\n}\n\n\nconst SearchGroup = (props: {\n    sizeX?: any;\n    platform?: any;\n    currentCountry: any;\n    setActiveModal: any;\n    listCurrency: any,\n}) => {\n\n    const [activePanel, setActivePanel] = React.useState('search');\n\n    const { platform } = props;\n    return (\n        <View\n            activePanel={activePanel}\n        >\n            <Panel id=\"search\">\n                <ChoseSearch currentCountry={props.currentCountry}\n                              setActiveModal={props.setActiveModal}\n                              sizeX={props.sizeX} goHeaderSearch={() => setActivePanel('header-search')}\n                              listCurrency={props.listCurrency}\n                              platform={platform} />\n            </Panel>\n        </View>\n    );\n}\n\nexport default SearchGroup;\n","import * as React from 'react';\n\nconst calculateValue = (firstValue: number, firstCountry: { country?: string; value: any; }, secondCountry: { country?: string; value: any; }) => {\n\n    const secondValue = firstValue * ( firstCountry.value / secondCountry.value);\n\n    if (isNaN(secondValue) || !isFinite(secondValue)) {\n        return ' ';\n    }\n    \n    return String(secondValue);\n}\n\nexport default calculateValue;\n","const config = {\n    // apiKey: '2c3232c58c3be78c9ae8c6e265a51a41',\n    // apiKey: 'demo-6410726746980cead2a17c9db9ef29af',\n    apiKey: '14992dc0b5275f114015307b2db6a605',\n    baseUrl: 'https://api.nomics.com/v1/',\n};\n\nconst currencyApi = (symbols: string[]): string =>\n    `${config.baseUrl}currencies/ticker?`+\n    `key=${config.apiKey}&`+\n    `ids=${symbols.join()}&`+\n    `interval=1h&`+\n    `convert=USD`;\n\nconst exchangeApi = `${config.baseUrl}/exchange-rates?`+\n                    `key=${config.apiKey}`;\n\nconst worldApi = (start: string, end: string):string =>\n    `${config.baseUrl}volume/history`+\n    `?key=${config.apiKey}&`+\n    `start=${start}`+\n    `&end=${end}`\n\nexport const apiUrls = {\n    currency: (symbols: string[]): string =>\n        currencyApi(symbols),\n\n    exchange: (): string => exchangeApi,\n\n    world: (start: string, end: string): string => worldApi(start, end),\n};\n","import axios from 'axios';\n\nimport { apiUrls } from '../../config/apiUrls';\nimport {normalizeCurrencyModel, normalizeExchangeModel} from '../models';\n\nexport const requestCurrencyStore = async (\n    // idFirst: string,\n    // idSecond: string,\n) => {\n    try {\n        const response = await axios(\n            // apiUrls.currency(idFirst, idSecond)\n            apiUrls.exchange()\n        );\n        return {\n            isError: false,\n            // data: normalizeCurrencyModel(response.data),\n            data: normalizeExchangeModel(response.data)\n        };\n    } catch (e) {\n        return {\n            isError: true,\n            data: [],\n        };\n    }\n};\n","export type currencyModel = {\n    symbol: string,\n    name: string,\n    logoUrl: string,\n    price: number\n};\n\nexport type currencyApiModel = {\n    symbol: string,\n    name: string,\n    logo_url: string,\n    price: string\n};\n\nexport const normalizeCurrencyModel = (\n    raw: currencyApiModel[]\n): (currencyModel)[] => (\n    [\n        {\n        symbol: raw[0].symbol,\n        name: raw[0].name,\n        logoUrl: raw[0].logo_url,\n            price: +raw[0].price\n    },\n    {\n        symbol: raw[1].symbol,\n        name: raw[1].name,\n        logoUrl: raw[1].logo_url,\n        price: +raw[1].price\n    }\n    ]\n);\n\nexport type exchangeApiModel = {\n    currency: string,\n    rate: string,\n}\n\nexport type exchangeModel = {\n    id: number,\n    name: string,\n    value: number,\n}\n\nexport const normalizeExchangeModel = (raw: exchangeApiModel[]): (exchangeModel)[] => {\n\n    return raw.map((item, index) =>{\n        return {\n            id: index,\n            name: item.currency,\n            value: +item.rate\n        };\n    });\n}\n","import {observable, action, computed, makeObservable, runInAction, IReactionDisposer, reaction} from 'mobx';\nimport { currencyModel, exchangeModel } from '../models';\nimport { Meta } from '../../utils/meta';\nimport {requestCurrencyStore} from \"./requestCurrencyStore\";\nimport { ILocalStore } from '../../utils/useLocal';\n\nexport default class CurrencyStore implements ILocalStore {\n    // _currency: currencyModel[] = [];\n    _exchange: exchangeModel[] = [];\n\n    meta: Meta = Meta.initial;\n\n    constructor() {\n        makeObservable(this, {\n            // _currency: observable,\n            fetch: action,\n            // currency: computed,\n\n            _exchange: observable,\n            exchange: computed,\n        });\n    }\n\n    async fetch(): Promise<void> {\n        if (this.meta === Meta.loading || this.meta === Meta.success) {\n            return;\n        }\n\n        this.meta = Meta.loading;\n        this._exchange = [];\n\n        // const { isError, data } = await requestCurrencyStore('BTC', 'ETH');\n        const { isError, data } = await requestCurrencyStore();\n        if (isError) {\n            this.meta = Meta.error;\n            return;\n        }\n\n        runInAction(() => {\n            this.meta = Meta.success;\n            // this._currency = data;\n            this._exchange = data.slice();\n        });\n    }\n\n    // get currency():currencyModel[] {\n    //     return this._currency;\n    // }\n\n    get exchange():exchangeModel[] {\n        return this._exchange;\n    }\n\n    destroy(): void {\n        this._metaChangedReaction();\n    }\n\n    _metaChangedReaction: IReactionDisposer = reaction(\n        () => this.meta,\n        (...args) => {\n            console.log('Reaction', args);\n        }\n    );\n}\n","import * as React from 'react';\n\nexport const useAsync = (func: () => Promise<any>, inputs: any[]): void => {\n    React.useEffect(() => {\n        func().catch(console.log);\n    }, [inputs, func]);\n};\n","import * as React from 'react';\n\nexport const useLocal = <T>(creator: () => T): T => {\n    const container = React.useRef<T | null>(null);\n\n    if (container.current === null) {\n        container.current = creator();\n    }\n\n    return container.current;\n};\n\nexport interface ILocalStore {\n    destroy(): void;\n}\n\nexport const useLocalStore = <T extends ILocalStore>(creator: () => T): T => {\n    const store = useLocal(creator);\n\n    React.useEffect(() => {\n        return () => store.destroy();\n    }, [store]);\n\n    return store;\n};\n","import * as React from 'react';\nimport {observer} from 'mobx-react-lite';\nimport {\n    FormItem,\n    Group,\n    Header,\n    Input, IS_PLATFORM_IOS, ModalPage, ModalPageHeader,\n    ModalRoot,\n    Panel,\n    PanelHeaderBack, PanelHeaderButton,\n    SelectMimicry,\n    View\n} from \"@vkontakte/vkui\";\nimport Search from \"../Search\";\nimport {Icon24Dismiss} from \"@vkontakte/icons\";\nimport calculateValue from './utils/calculateValue';\nimport CurrencyStore from '../../store/currencyStore';\n\nimport { useAsync } from '../../utils/useAsync';\nimport { useLocalStore } from '../../utils/useLocal';\n\nconst Change = (props: {setActiveView: any}) => {\n\n    const store = useLocalStore(() => new CurrencyStore());\n\n    useAsync(() => store.fetch(), []);\n\n    const [activeModal, setActiveModal] = React.useState({\n        homeValue: null,\n        currentValue: '',\n    });\n\n    const [currentCountry, setCurrentCountry] = React.useState({\n        country: '',\n        value: 0\n    });\n\n    const [currentCountry2, setCurrentCountry2] = React.useState({\n        country: '',\n        value: 0\n    });\n\n    const [firstMoney, setFirstMoney] = React.useState(0);\n    const [secondMoney, setSecondMoney] = React.useState('');\n\n    React.useEffect(\n        () => {\n            setSecondMoney(String(calculateValue(firstMoney, currentCountry, currentCountry2)));\n        },\n        [firstMoney, currentCountry, currentCountry2],\n    );\n\n    const modal = (\n        <ModalRoot\n            activeModal={(activeModal.currentValue === '') ? activeModal.homeValue : activeModal.currentValue}\n        >\n            <ModalPage\n                id={'countries'}\n                onClose={() => {\n                    setActiveModal({\n                        homeValue: null,\n                        currentValue: ''\n                    });\n                }}\n                header={\n                    <ModalPageHeader\n                        left={\n                            <PanelHeaderBack label=\"Назад\"\n                                onClick={() => {\n                                    setActiveModal({\n                                        homeValue: null,\n                                        currentValue: ''\n                                    });\n                                }}\n                            />\n                        }\n                        right={\n                            IS_PLATFORM_IOS &&\n                                <PanelHeaderButton\n                                    onClick={() => {\n                                        setActiveModal({\n                                            homeValue: null,\n                                            currentValue: ''\n                                        });\n                                    }}\n                                >\n                                <Icon24Dismiss />\n                            </PanelHeaderButton>\n                        }\n                    >\n                        Выберите валюту\n                    </ModalPageHeader>\n                }\n                settlingHeight={80}\n            >\n                <Group>\n                    <Search\n                        currentCountry={setCurrentCountry}\n                        setActiveModal={setActiveModal}\n                        listCurrency={store.exchange}\n                    />\n                </Group>\n            </ModalPage>\n\n            <ModalPage\n                id={'countries2'}\n                onClose={() => {\n                    setActiveModal({\n                        homeValue: null,\n                        currentValue: ''\n                    });\n                }}\n                header={\n                    <ModalPageHeader\n                        left={\n                            <PanelHeaderBack label=\"Назад\"\n                                             onClick={() => {\n                                                 setActiveModal({\n                                                     homeValue: null,\n                                                     currentValue: ''\n                                                 });\n                                             }}\n                            />\n                        }\n                        right={\n                            IS_PLATFORM_IOS &&\n                            <PanelHeaderButton\n                                onClick={() => {\n                                    setActiveModal({\n                                        homeValue: null,\n                                        currentValue: ''\n                                    });\n                                }}\n                            >\n                                <Icon24Dismiss />\n                            </PanelHeaderButton>\n                        }\n                    >\n                        Выберите валюту\n                    </ModalPageHeader>\n                }\n                settlingHeight={80}\n            >\n                <Group>\n                    <Search\n                        currentCountry={setCurrentCountry2}\n                        setActiveModal={setActiveModal}\n                        listCurrency={store.exchange}\n                    />\n                </Group>\n            </ModalPage>\n        </ModalRoot>\n    );\n\n    return (\n\n        <View activePanel=\"modals\" modal={modal}>\n            <Panel id=\"modals\">\n                <Group header={<Header onClick={() => props.setActiveView('home')} mode=\"secondary\">Назад</Header>}>\n                    <FormItem top=\"Выберите валюту 1\">\n                        <SelectMimicry\n                            placeholder=\"Не выбрана\"\n                            onClick={() => setActiveModal({\n                                homeValue: null,\n                                currentValue: 'countries'\n                            })}\n                        >{currentCountry.country}\n                        </SelectMimicry>\n                    </FormItem>\n                    <FormItem top=\"Количество валюты 1\">\n                        <Input value={String(firstMoney)} onChange={e => setFirstMoney(Number(e.target.value))} type=\"number\"/>\n                    </FormItem>\n                    <FormItem top=\"Выберите валюту 2\">\n                        <SelectMimicry\n                            placeholder=\"Не выбрана\"\n                            onClick={() => setActiveModal({\n                                homeValue: null,\n                                currentValue: 'countries2'\n                            })}\n                        >{currentCountry2.country}\n                        </SelectMimicry>\n                    </FormItem>\n                    <FormItem top=\"Количество валюты 2\">\n                        <Input value={secondMoney} type=\"string\" disabled/>\n                    </FormItem>\n                </Group>\n            </Panel>\n        </View>\n    )\n}\n\nexport default observer(Change);\n","import * as React from \"react\";\n\nconst useWindowSize = () => {\n    const [windowSize, setWindowSize] = React.useState({\n        width: 0,\n        height: 0,\n    });\n\n    React.useEffect(() => {\n        const handleResize = () => {\n            setWindowSize({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n        window.addEventListener(\"resize\", handleResize);\n        handleResize();\n        return () => window.removeEventListener(\"resize\", handleResize);\n    }, []);\n\n    return windowSize;\n}\n\nexport default useWindowSize;\n","import * as React from 'react';\n\nconst interval: number = 6;\n\nconst changeHours = (currentDate: Date, days: number) => {\n    const date = new Date(currentDate.valueOf());\n    date.setDate(date.getDate() - days);\n    return date;\n}\n\nconst makeInterval = () => {\n    const end = new Date();\n    const start = changeHours(end, interval);\n    return [start.toISOString(), end.toISOString()];\n}\n\nexport default makeInterval;\n","import axios from 'axios';\nimport { apiUrls } from '../../config/apiUrls';\nimport { normalizeWorldModel } from '../models';\n\nexport const requestWorldStore = async (start: string, end: string) => {\n    try {\n        const response = await axios(\n                {\n                    url: apiUrls.world(start, end),\n                    headers: {\n                        'Access-Control-Allow-Origin': '*',\n                    }\n                }\n        );\n        return {\n            isError: false,\n            data: normalizeWorldModel(response.data)\n        };\n    } catch (e) {\n        return {\n            isError: true,\n            data: [],\n        };\n    }\n};\n","export type worldApiModel = {\n    timestamp: string,\n    volume: string\n};\n\nexport type worldModel = {\n    date: string,\n    Доллары: number\n};\n\nexport const normalizeWorldModel = (raw: worldApiModel[]): (worldModel)[] => {\n\n    return raw.map((item) =>{\n\n        const currentDate = new Date(item.timestamp);\n        const currentDateProp = {\n            year: currentDate.getFullYear(),\n            month: currentDate.getMonth() + 1,\n            day: currentDate.getDate()\n        };\n        const date = `${currentDateProp.day}.`+\n            `${currentDateProp.month}.`+\n            `${currentDateProp.year}`;\n\n        return {\n            date: date,\n            Доллары: +item.volume\n        };\n    });\n}\n","import {observable, action, computed, makeObservable, runInAction, IReactionDisposer, reaction} from 'mobx';\nimport { worldModel } from '../models';\nimport { Meta } from '../../utils/meta';\nimport { requestWorldStore } from \"./requestWorldStore\";\nimport { ILocalStore } from '../../utils/useLocal';\n\nexport default class WorldStore implements ILocalStore {\n    _world: worldModel[] = [];\n\n    meta: Meta = Meta.initial;\n\n    _startTime = '';\n    _endTime = '';\n\n    constructor(start: string, end: string) {\n        makeObservable(this, {\n            _world: observable,\n            _startTime: observable,\n            _endTime: observable,\n            fetch: action.bound,\n            world: computed,\n        });\n        this._startTime = start;\n        this._endTime = end;\n    }\n\n    async fetch(): Promise<void> {\n        if (this.meta === Meta.loading || this.meta === Meta.success) {\n            return;\n        }\n\n        this.meta = Meta.loading;\n        this._world = [];\n\n        const { isError, data } = await requestWorldStore(this._startTime, this._endTime);\n        if (isError) {\n            this.meta = Meta.error;\n            return;\n        }\n\n        runInAction(() => {\n            this.meta = Meta.success;\n            this._world = data.slice();\n        });\n    }\n\n    get world():worldModel[] {\n        return this._world;\n    }\n\n    destroy(): void {\n        this._metaChangedReaction();\n    }\n\n    _metaChangedReaction: IReactionDisposer = reaction(\n        () => this.meta,\n        (...args) => {\n            console.log('Reaction', args);\n        }\n    );\n}\n","import * as React from 'react';\nimport {\n    LineChart,\n    XAxis,\n    Tooltip,\n    CartesianGrid,\n    Line,\n} from 'recharts';\nimport useWindowSize from \"../../utils/useWindowSize\";\nimport styles from './Chart.module.scss';\nimport {Title} from \"@vkontakte/vkui\";\nimport makeInterval from \"./utils/makeInterval\";\nimport {useLocalStore} from \"../../utils/useLocal\";\nimport {useAsync} from \"../../utils/useAsync\";\nimport WorldStore from \"../../store/worldStore\";\nimport {observer} from \"mobx-react-lite\";\n\nconst MainChart = () => {\n\n    const screenWidth = useWindowSize();\n    const [start, end] = makeInterval();\n    const store = useLocalStore(() => new WorldStore(start, end));\n\n    useAsync(store.fetch, []);\n\n    return (\n        <div\n            className={styles.chartStyle}\n        >\n            <Title level=\"3\" weight=\"bold\" style={{\n                marginBottom: 8,\n                marginTop: 8,\n                marginLeft: '5%',\n                marginRight: '5%' }}\n            >\n                Общий объем всех криптоактивов\n            </Title>\n            <LineChart\n                width={screenWidth.width-40}\n                height={150}\n                data={store.world}\n            >\n                <XAxis dataKey=\"date\" tick={{ fill: '#818c99', fontSize: 13 }}/>\n                <Tooltip wrapperStyle={{ fontSize: 13 }}/>\n                <CartesianGrid stroke=\"#f5f5f5\" />\n                <Line type=\"monotone\" dataKey=\"Доллары\" stroke=\"#ff7300\" yAxisId={0} />\n                {/*<Line type=\"monotone\" dataKey=\"Евро\" stroke=\"#387908\" yAxisId={1} />*/}\n            </LineChart>\n        </div>\n    );\n};\n\nexport default observer(MainChart);\n","import * as React from 'react';\nimport {observer} from 'mobx-react-lite';\nimport {Avatar, Banner} from \"@vkontakte/vkui\";\n\n// import { useAsync } from '../../utils/useAsync';\n// import { useLocalStore } from '../../utils/useLocal';\n\nconst singleCurrency = () => {\n\n    // const store = useLocalStore(() => new CurrencyStore());\n    //\n    // useAsync(() => store.fetch(), []);\n\n    return (\n\n        <Banner\n            style={{\n                margin: 0,\n                padding: 0,\n            }}\n            before={\n                <Avatar size={70}\n                        mode=\"image\"\n                        src=\"https://s3.us-east-2.amazonaws.com/nomics-api/static/images/currencies/btc.svg\"\n                />\n            }\n            header=\"BTC\"\n            subheader=\"Bitcoin\"\n        />\n    )\n}\n\nexport default observer(singleCurrency);\n","import axios from 'axios';\nimport { apiUrls } from '../../config/apiUrls';\nimport {normalizeSingleCurrencyModel} from \"../models/singleCurrency\";\n\nexport const requestSingleCurrencyStore = async (symbols: string[]) => {\n    try {\n        const response = await axios(\n            apiUrls.currency(symbols)\n        );\n        return {\n            isError: false,\n            data: normalizeSingleCurrencyModel(response.data)\n        };\n    } catch (e) {\n        return {\n            isError: true,\n            data: [],\n        };\n    }\n};\n","export type singleCurrencyApiModel = {\n    symbol: string,\n    name: string,\n    logo_url: string,\n    price: string\n}\n\nexport type singleCurrencyModel = {\n    symbol: string,\n    name: string,\n    logoUrl: string,\n    price: number\n}\n\nexport const normalizeSingleCurrencyModel = (raw: singleCurrencyApiModel[]): (singleCurrencyModel)[] => {\n\n    return raw.map((item, index) =>{\n        return {\n            symbol: item.symbol,\n            name: item.name,\n            logoUrl: item.logo_url,\n            price: +(item.price.slice(0, item.price.length - 4))\n        };\n    });\n}\n","import {observable, action, computed, makeObservable, runInAction, IReactionDisposer, reaction} from 'mobx';\nimport { Meta } from '../../utils/meta';\nimport { ILocalStore } from '../../utils/useLocal';\nimport {singleCurrencyModel} from \"../models/singleCurrency\";\nimport {requestSingleCurrencyStore} from \"./requestCurrencyStore\";\n\nexport default class singleCurrencyStore implements ILocalStore {\n    _currency: singleCurrencyModel[] = [];\n    _symbols: string[] = [];\n\n    meta: Meta = Meta.initial;\n\n    constructor(symbols: string[]) {\n        makeObservable(this, {\n            _currency: observable,\n            fetch: action.bound,\n            currency: computed,\n        });\n        this._symbols = symbols;\n    }\n\n    async fetch(): Promise<void> {\n        if (this.meta === Meta.loading || this.meta === Meta.success) {\n            return;\n        }\n\n        this.meta = Meta.loading;\n        this._currency = [];\n\n        const { isError, data } = await requestSingleCurrencyStore(this._symbols);\n        if (isError) {\n            this.meta = Meta.error;\n            return;\n        }\n\n        runInAction(() => {\n            this.meta = Meta.success;\n            this._currency = data.slice();\n        });\n    }\n\n    get currency():singleCurrencyModel[] {\n        return this._currency;\n    }\n\n    destroy(): void {\n        this._metaChangedReaction();\n    }\n\n    _metaChangedReaction: IReactionDisposer = reaction(\n        () => this.meta,\n        (...args) => {\n            console.log('Reaction', args);\n        }\n    );\n}\n","import * as React from 'react';\nimport {\n    Card,\n    CardGrid,\n    CardScroll,\n    CellButton,\n    Group,\n    Panel,\n    PanelHeader,\n    Root,\n    View\n} from \"@vkontakte/vkui\";\n\nimport styles from './Home.module.scss';\nimport {ReactSVG} from \"react-svg\";\nimport iconExchange from './icons/exchange.svg'\nimport Change from \"../Change\";\nimport Chart from \"../Chart\";\nimport SingleCurrency from \"../SingleCurrency\";\nimport {useLocalStore} from \"../../utils/useLocal\";\nimport {useAsync} from \"../../utils/useAsync\";\nimport singleCurrencyStore from \"../../store/singleCurrencyStore\";\n\nconst Home = () => {\n\n    const [activeView, setActiveView] = React.useState('home');\n\n    const store = useLocalStore(() => new singleCurrencyStore(['BTC','ETH', 'LTC', 'XMR']));\n\n    useAsync(store.fetch, []);\n\n    return (\n            <Root activeView={activeView}>\n                <View activePanel=\"card\" id=\"home\">\n                    <Panel id=\"card\">\n                        <PanelHeader>Money talk</PanelHeader>\n                        <Group description=\"Опции\">\n                            <CardScroll size=\"s\">\n                                <Card>\n                                    <CellButton style={{ height: 150 }} onClick={ () => setActiveView('change') }>\n                                        <ReactSVG\n                                            src={iconExchange}\n                                            className={styles.svgicon}\n                                        />\n                                    </CellButton>\n                                </Card>\n                                <Card>\n\n                                </Card>\n                                <Card>\n                                </Card>\n                                <Card>\n                                </Card>\n                                <Card>\n                                </Card>\n                                <Card>\n                                </Card>\n                            </CardScroll>\n                        </Group>\n                        <CardScroll size=\"s\">\n                            <Card>\n                                <SingleCurrency />\n                            </Card>\n                            <Card>\n                            </Card>\n                            <Card>\n                            </Card>\n                            <Card>\n                            </Card>\n                        </CardScroll>\n                        <CardScroll size=\"l\">\n                            <Card>\n                                <div>l</div>\n                            </Card>\n                            <Card>\n                            </Card>\n                            <Card>\n                            </Card>\n                        </CardScroll>\n                        <Group description=\"в Долларах\">\n                            <CardGrid size={\"l\"}>\n                                <Card mode=\"shadow\">\n                                    <Chart />\n                                </Card>\n                            </CardGrid>\n                        </Group>\n                    </Panel>\n                </View>\n                <View activePanel=\"card\" id=\"change\">\n                    <Panel id=\"card\">\n                        <PanelHeader>Конвертер</PanelHeader>\n                        <Change setActiveView={setActiveView} />\n                    </Panel>\n                </View>\n            </Root>);\n};\n\nexport default Home;\n","import React from 'react';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport Home from \"./components/Home/Home\";\n\nfunction App () {\n\n    return (\n        <Home />\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport bridge from '@vkontakte/vk-bridge';\n\n// Sends event to client\nbridge.send('VKWebAppInit');\n\n// Subscribes to event, sended by client\nbridge.subscribe(e => console.log(e));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}